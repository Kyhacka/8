using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class MenuItem
{
    // Свойства
    public int Id { get; set; }                 // Уникальный идентификатор
    public string Name { get; set; }            // Название блюда
    public string Category { get; set; }        // Категория (закуска, основное, десерт и т.д.)
    public decimal Price { get; set; }          // Цена
    public double Weight { get; set; }          // Вес в граммах
    public bool IsVegetarian { get; set; }      // Вегетарианское ли блюдо
    public TimeSpan CookingTime { get; set; }   // Время приготовления
    public int Calories { get; set; }           // Калорийность

    // Конструкторы
    public MenuItem() { }

    public MenuItem(int id, string name, string category, decimal price, double weight,
                   bool isVegetarian, TimeSpan cookingTime, int calories)
    {
        Id = id;
        Name = name;
        Category = category;
        Price = price;
        Weight = weight;
        IsVegetarian = isVegetarian;
        CookingTime = cookingTime;
        Calories = calories;
    }

    // Перегруженный метод ToString()
    public override string ToString()
    {
        return $"ID: {Id}\nНазвание: {Name}\nКатегория: {Category}\nЦена: {Price} руб.\n" +
               $"Вес: {Weight} г\nВегетарианское: {(IsVegetarian ? "Да" : "Нет")}\n" +
               $"Время приготовления: {CookingTime.TotalMinutes} мин.\nКалорийность: {Calories} ккал\n";
    }
}
public static class CafeDatabase
{
    private static string filePath = "menu.dat";
    private static List<MenuItem> menuItems = new List<MenuItem>();

    // Загрузка данных из файла
    public static void LoadDatabase()
    {
        try
        {
            if (File.Exists(filePath))
            {
                using (BinaryReader reader = new BinaryReader(File.Open(filePath, FileMode.Open)))
                {
                    menuItems.Clear();
                    while (reader.BaseStream.Position != reader.BaseStream.Length)
                    {
                        MenuItem item = new MenuItem
                        {
                            Id = reader.ReadInt32(),
                            Name = reader.ReadString(),
                            Category = reader.ReadString(),
                            Price = reader.ReadDecimal(),
                            Weight = reader.ReadDouble(),
                            IsVegetarian = reader.ReadBoolean(),
                            CookingTime = TimeSpan.FromMinutes(reader.ReadDouble()),
                            Calories = reader.ReadInt32()
                        };
                        menuItems.Add(item);
                    }
                }
                Console.WriteLine("База данных успешно загружена.");
            }
            else
            {
                Console.WriteLine("Файл базы данных не найден. Создана новая база.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке базы данных: {ex.Message}");
        }
    }

    // Сохранение данных в файл
    public static void SaveDatabase()
    {
        try
        {
            using (BinaryWriter writer = new BinaryWriter(File.Open(filePath, FileMode.Create)))
            {
                foreach (var item in menuItems)
                {
                    writer.Write(item.Id);
                    writer.Write(item.Name);
                    writer.Write(item.Category);
                    writer.Write(item.Price);
                    writer.Write(item.Weight);
                    writer.Write(item.IsVegetarian);
                    writer.Write(item.CookingTime.TotalMinutes);
                    writer.Write(item.Calories);
                }
            }
            Console.WriteLine("База данных успешно сохранена.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении базы данных: {ex.Message}");
        }
    }

    // Просмотр всех элементов
    public static void ViewAllItems()
    {
        if (menuItems.Count == 0)
        {
            Console.WriteLine("Меню пусто.");
            return;
        }

        var sortedItems = from item in menuItems
                          orderby item.Category, item.Price
                          select item;

        foreach (var item in sortedItems)
        {
            Console.WriteLine(item);
            Console.WriteLine("----------------------");
        }
    }

    // Добавление нового элемента
    public static void AddItem(MenuItem item)
    {
        if (menuItems.Any(i => i.Id == item.Id))
        {
            Console.WriteLine("Элемент с таким ID уже существует.");
            return;
        }

        menuItems.Add(item);
        Console.WriteLine("Блюдо успешно добавлено в меню.");
    }

    // Удаление элемента по ID
    public static void RemoveItem(int id)
    {
        var itemToRemove = menuItems.FirstOrDefault(i => i.Id == id);
        if (itemToRemove != null)
        {
            menuItems.Remove(itemToRemove);
            Console.WriteLine("Блюдо успешно удалено из меню.");
        }
        else
        {
            Console.WriteLine("Блюдо с указанным ID не найдено.");
        }
    }

    // Поиск вегетарианских блюд
    public static void ViewVegetarianItems()
    {
        var vegetarianItems = from item in menuItems
                              where item.IsVegetarian
                              orderby item.Price
                              select item;

        if (!vegetarianItems.Any())
        {
            Console.WriteLine("Вегетарианских блюд в меню нет.");
            return;
        }

        Console.WriteLine("Вегетарианские блюда:");
        foreach (var item in vegetarianItems)
        {
            Console.WriteLine(item);
            Console.WriteLine("----------------------");
        }
    }

    // Поиск блюд по категории
    public static void ViewItemsByCategory(string category)
    {
        var categoryItems = from item in menuItems
                            where item.Category.Equals(category, StringComparison.OrdinalIgnoreCase)
                            orderby item.Price
                            select item;

        if (!categoryItems.Any())
        {
            Console.WriteLine($"Блюд в категории '{category}' не найдено.");
            return;
        }

        Console.WriteLine($"Блюда в категории '{category}':");
        foreach (var item in categoryItems)
        {
            Console.WriteLine(item);
            Console.WriteLine("----------------------");
        }
    }

    // Поиск блюд в ценовом диапазоне
    public static void ViewItemsInPriceRange(decimal minPrice, decimal maxPrice)
    {
        var priceRangeItems = from item in menuItems
                              where item.Price >= minPrice && item.Price <= maxPrice
                              orderby item.Price
                              select item;

        if (!priceRangeItems.Any())
        {
            Console.WriteLine($"Блюд в ценовом диапазоне от {minPrice} до {maxPrice} руб. не найдено.");
            return;
        }

        Console.WriteLine($"Блюда в ценовом диапазоне от {minPrice} до {maxPrice} руб.:");
        foreach (var item in priceRangeItems)
        {
            Console.WriteLine(item);
            Console.WriteLine("----------------------");
        }
    }
}
class Program
{
    static void Main(string[] args)
    {
        Console.OutputEncoding = System.Text.Encoding.UTF8;
        CafeDatabase.LoadDatabase();

        while (true)
        {
            Console.WriteLine("\nМЕНЮ УПРАВЛЕНИЯ БАЗОЙ ДАННЫХ КАФЕ");
            Console.WriteLine("1. Просмотр всего меню");
            Console.WriteLine("2. Добавить новое блюдо");
            Console.WriteLine("3. Удалить блюдо по ID");
            Console.WriteLine("4. Просмотр вегетарианских блюд");
            Console.WriteLine("5. Просмотр блюд по категории");
            Console.WriteLine("6. Просмотр блюд в ценовом диапазоне");
            Console.WriteLine("7. Сохранить изменения");
            Console.WriteLine("8. Выход");
            Console.Write("Выберите действие: ");

            if (!int.TryParse(Console.ReadLine(), out int choice))
            {
                Console.WriteLine("Некорректный ввод. Пожалуйста, введите число от 1 до 8.");
                continue;
            }

            try
            {
                switch (choice)
                {
                    case 1:
                        CafeDatabase.ViewAllItems();
                        break;
                    case 2:
                        AddNewMenuItem();
                        break;
                    case 3:
                        RemoveMenuItem();
                        break;
                    case 4:
                        CafeDatabase.ViewVegetarianItems();
                        break;
                    case 5:
                        ViewByCategory();
                        break;
                    case 6:
                        ViewByPriceRange();
                        break;
                    case 7:
                        CafeDatabase.SaveDatabase();
                        break;
                    case 8:
                        Console.WriteLine("Сохранить изменения перед выходом? (y/n)");
                        if (Console.ReadLine().ToLower() == "y")
                        {
                            CafeDatabase.SaveDatabase();
                        }
                        return;
                    default:
                        Console.WriteLine("Некорректный выбор. Пожалуйста, введите число от 1 до 8.");
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Произошла ошибка: {ex.Message}");
            }
        }
    }

    static void AddNewMenuItem()
    {
        Console.WriteLine("\nДобавление нового блюда:");

        Console.Write("ID: ");
        int id = int.Parse(Console.ReadLine());

        Console.Write("Название: ");
        string name = Console.ReadLine();

        Console.Write("Категория: ");
        string category = Console.ReadLine();

        Console.Write("Цена (руб.): ");
        decimal price = decimal.Parse(Console.ReadLine());

        Console.Write("Вес (г): ");
        double weight = double.Parse(Console.ReadLine());

        Console.Write("Вегетарианское (y/n): ");
        bool isVegetarian = Console.ReadLine().ToLower() == "y";

        Console.Write("Время приготовления (минуты): ");
        double minutes = double.Parse(Console.ReadLine());
        TimeSpan cookingTime = TimeSpan.FromMinutes(minutes);

        Console.Write("Калорийность (ккал): ");
        int calories = int.Parse(Console.ReadLine());

        MenuItem newItem = new MenuItem(id, name, category, price, weight,
                                       isVegetarian, cookingTime, calories);
        CafeDatabase.AddItem(newItem);
    }

    static void RemoveMenuItem()
    {
        Console.Write("\nВведите ID блюда для удаления: ");
        int id = int.Parse(Console.ReadLine());
        CafeDatabase.RemoveItem(id);
    }

    static void ViewByCategory()
    {
        Console.Write("\nВведите категорию для поиска: ");
        string category = Console.ReadLine();
        CafeDatabase.ViewItemsByCategory(category);
    }

    static void ViewByPriceRange()
    {
        Console.Write("\nВведите минимальную цену: ");
        decimal minPrice = decimal.Parse(Console.ReadLine());

        Console.Write("Введите максимальную цену: ");
        decimal maxPrice = decimal.Parse(Console.ReadLine());

        CafeDatabase.ViewItemsInPriceRange(minPrice, maxPrice);
    }
}
